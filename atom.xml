<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Den of Antiquity]]></title>
  <link href="http://dragonfax.github.com/atom.xml" rel="self"/>
  <link href="http://dragonfax.github.com/"/>
  <updated>2013-09-06T15:22:26-07:00</updated>
  <id>http://dragonfax.github.com/</id>
  <author>
    <name><![CDATA[Jason Stillwell]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[migrating from toodledo to asana]]></title>
    <link href="http://dragonfax.github.com/blog/2013/08/28/migrating-from-toodledo-to-asana/"/>
    <updated>2013-08-28T18:38:00-07:00</updated>
    <id>http://dragonfax.github.com/blog/2013/08/28/migrating-from-toodledo-to-asana</id>
    <content type="html"><![CDATA[<div><script src='https://gist.github.com/6373376.js'></script>
<noscript><pre><code></code></pre></noscript></div>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[install perl]]></title>
    <link href="http://dragonfax.github.com/blog/2013/08/04/install-perl/"/>
    <updated>2013-08-04T17:55:00-07:00</updated>
    <id>http://dragonfax.github.com/blog/2013/08/04/install-perl</id>
    <content type="html"><![CDATA[<div><script src='https://gist.github.com/6152760.js'></script>
<noscript><pre><code></code></pre></noscript></div>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[legislature]]></title>
    <link href="http://dragonfax.github.com/blog/2013/06/30/legislature/"/>
    <updated>2013-06-30T23:45:00-07:00</updated>
    <id>http://dragonfax.github.com/blog/2013/06/30/legislature</id>
    <content type="html"><![CDATA[<h1>Coding and Legislature</h1>

<p>I&rsquo;ve never understood why we don&rsquo;t employ standard software engineering practices when creating laws.</p>

<ul>
<li>Comments, Documentation, Readable Code</li>
<li>Version Control</li>
<li>Boilerplate and DRY</li>
<li>Refactoring</li>
<li>Modularity</li>
<li>Code Reviews</li>
<li>Beta Testing</li>
<li>Use Cases, Case Scenarios, Feature Testing</li>
<li>User Experience and Interface Design</li>
</ul>


<h3>Documentation</h3>

<p>Clearly, written laws not meant to be understood by laymen.  That&rsquo;s okay though, we have compilers that translate our English code into binary form.</p>

<p>Now I&rsquo;m not saying write laws as a form of code, or even pseudo code. Thats a bit extreme.  But readable code is considered to be goal, not a detriment.  When we can&rsquo;t write legible code, we add comments to explain the purpose of the line or stanza.  We&rsquo;ll even document the code and its entire processes externally elsewhere, to help others follow along with our intentions.</p>

<p>Often we&rsquo;ll take the extra step of designing the process first, before any code is written.  Using English and obtaining agreement from all concerns parties on the &ldquo;design&rdquo; of the process before starting the actual implementation.</p>

<p>With this implementation kept separate from the design and intention, we can obtain agreement on the &ldquo;goals&rdquo; of said process.  And if we can&rsquo;t reach an agreement on the implementation of the process then it turns out we really didn&rsquo;t have agreement on the design. Or the design wasn&rsquo;t clear enough to begin with.</p>

<h3>Design Patterns and Refactoring</h3>

<p>When code gets hard to understand we employ various maneuvers to keep it readable, understandable, and maintainable.</p>

<p>We break off pieces of the code into other projects, other files.  Abstracting and refactoring the commonalities, breaking out the patterns, and rewriting the code into something more concise, that conveys just the notion it was meant to.</p>

<h3>Version Control and Code Reviews</h3>

<p>Our &ldquo;code review&rdquo; process today in the law making process is well known to be terrible. Many laws and versions of laws are never inspected by all the necessary law makers before making it into the books.</p>

<p>We tend to employ simple version control techniques to follow the changes made to code over time. Pull request are an idea way to implement Code Reviews to ensure every change is heavily vetted before its made live.</p>

<h3>Testing, Testing, Testing</h3>

<p>We test a lot in software engineering. We find ways to verify the behavior of a piece of code before it does live, or more importantly, verify that we haven&rsquo;t improperly altered the previous behavior of code after we&rsquo;ve changed it.</p>

<p>Review laws and apply them, experimentally, against previously recorded and vetted case scenarios.  Existing people, real or fictitious, who embody the traits effected by these laws.  Do they effect people they shouldn&rsquo;t.  And can we somehow prove that they actually effect the change they desire to make?</p>

<p>Couldn&rsquo;t we have a single state or section of the country where new laws are tried out experimentally before they pass for the entire country?</p>

<h3>Human Experience</h3>

<ul>
<li>Can a normal person understand the law, its purpose, its effects?</li>
<li>Does it seem nonsensical, convoluted to everyone other than the author?</li>
<li>Can an average person understand what to do to live by that law, and to avoid breaking it.</li>
<li>Finally, does it improve or reduce the happiness in a persons life or break our fundamental freedoms and human rights?</li>
</ul>


<h3>Wrap Up</h3>

<p>There&rsquo;s a general analogy here between Code and Law. A think there&rsquo;s more similarity than difference between them.</p>

<p>Now this is, of course, a very immature proposal.  You know they say that when all you have is a hammer, every problem looks like a nail.  And, full disclosure, I am a Software Engineer, after all.</p>

<p>But I suppose there are probably some carpenters out there that think driving a nail into the head of every representative would be a great way to solve all of our legal problems.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[disillusionment]]></title>
    <link href="http://dragonfax.github.com/blog/2013/06/30/disillusionment/"/>
    <updated>2013-06-30T20:48:00-07:00</updated>
    <id>http://dragonfax.github.com/blog/2013/06/30/disillusionment</id>
    <content type="html"><![CDATA[<h3>Disillusionment as a Service</h3>

<p>Listening to a friend talk a little bit about her own trouble getting involved in charity work and social change organizations, reminded me of how hard it was for me to get into the regular practice of &ldquo;Giving&rdquo;.</p>

<p>The biggest thing I fought against was the simple idea that my little bit couldn&rsquo;t possibly make a difference.  And that going out there and helping was just to make me feel better, in a conceited sort of way.  I had to get past that, and see that every bit does count.</p>

<p>&ldquo;Disillusionment in our ability to actually effect any real change.&rdquo;  Its a big problem that people fight with today, especially the youth, when it comes to getting involved in politics, volunteering, donating to charity organizations.</p>

<h3>Visualization is the Bane to Disillusionment</h3>

<p>We need to find a way to see how your bit of change (literal or figurative) combines with that of others.  Not just for one or two charities at a time, but with all organizations. To show you that you really are making a difference, even just your little bit.  Because it gets added to your friends little bits, and everyone else&rsquo;s little its.  This helps people to visualize the impact of their change.</p>

<p>Its the same mentality you see in a demonstration.  You get see the power of people coming together.  And reminded your not alone here.  You can make change when you all come together.</p>

<p>This is something thats not easily seen with the systems in place today.  And visualizing would make it easy to believe.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Make pre-commit Hook Default]]></title>
    <link href="http://dragonfax.github.com/blog/2013/06/23/make-pre-commit-hook-default/"/>
    <updated>2013-06-23T22:25:00-07:00</updated>
    <id>http://dragonfax.github.com/blog/2013/06/23/make-pre-commit-hook-default</id>
    <content type="html"><![CDATA[<div><script src='https://gist.github.com/5847823.js'></script>
<noscript><pre><code></code></pre></noscript></div>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[A little more Trello in my life]]></title>
    <link href="http://dragonfax.github.com/blog/2013/05/06/trello/"/>
    <updated>2013-05-06T14:32:00-07:00</updated>
    <id>http://dragonfax.github.com/blog/2013/05/06/trello</id>
    <content type="html"><![CDATA[<h2>The Search for Spock</h2>

<p>I&rsquo;m always looking for better ways to organizing my life and improving my personal productivity. One tool that has popped up in several discussion is Trello. I know a few people using it as a flexible online board for managing their workload, both professionally and personally. It seems like a great idea to work this into my own arsenal and see if its the godsend all the hype leads me to believe.</p>

<p>After a little research and toying around I did find it particularly flexible. But I also found that most examples on the web use Trello in the exact same way with the same pattern of usage.</p>

<h2>&ldquo;Trello&rdquo;, by Trello</h2>

<p>Trello provides the expected help documentation, describing the features, how to find them, add elements, and work with the widgets in the application.</p>

<p>On the other hand what they don&rsquo;t provide is specific usage patterns.  They don&rsquo;t describe workflows or methods to use the product for various ends. Instead leaving that up to other online examples or for the user to figure it out on his/her own.</p>

<p>I&rsquo;ve seen this before with online products and its always a point of annoyance for me.  While I understand leaving things open-ended so that users can find their own ways to take advantage of the product, and not pidgin-hole it into one niche.</p>

<p>But by not giving clear instructions or even just examples on how some people use it, or how you think it <strong>could</strong> be used for new users early on, you just make it difficult for users to get into the service in the first place.</p>

<p>Twitter has the same issue. They refuse to clearly define the service and how it should be used.  And its a waste, as those who find new ways to use tools won&rsquo;t be deterred by the predefinition of its use.  i.e. The hashtag would still have been invented, whether it was in the Twitter docs or not.</p>

<h3>Vocabulary</h3>

<p>Lets go over some Trello vocabulary quickly, or at least what they define for users. Teaching you how to use Trello is outside of the scope of this post, so I&rsquo;m just going to review the terms.</p>

<ul>
<li><strong>Board</strong> &ndash; Groups Lists together.</li>
<li><strong>List</strong> (of cards)</li>
<li><strong>Card</strong> &ndash; Groups everything else together, a description with any number of <strong>comments</strong> and <strong>checklists</strong>.</li>
<li><strong>Checklist</strong> &ndash; Works like a &ldquo;Todo&rdquo; list.</li>
</ul>


<h3>Hierarchy</h3>

<p>The built-in structure or relationship between these components  within Trello is pretty simple to lay out.</p>

<ul>
<li><strong>account</strong>

<ul>
<li><strong>boards</strong>

<ul>
<li><strong>lists</strong>

<ul>
<li><strong>cards</strong>

<ul>
<li>card <strong>title</strong></li>
<li>card <strong>description</strong></li>
<li><strong>checklists</strong></li>
<li><strong>comments</strong></li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>


<h2>Board = Process/Workflow</h2>

<p>The pattern I see most often used online for Trello is a simple board->workflow pattern, where a <strong>board</strong> represents one &ldquo;workflow&rdquo; which may have several &ldquo;steps&rdquo; within it. In this case each &ldquo;step&rdquo; is represented by a <strong>list</strong>.</p>

<p>In this system, the cards represent work items that are running through the &ldquo;workflow&rdquo;. They rest in the &ldquo;list&rdquo; that pertains to the step in the workflow where they currently reside.  This might be similar to a tool used for scrum tracking.</p>

<ul>
<li><strong>board</strong> &ndash;> &ldquo;workflow&rdquo; or process</li>
<li><strong>list</strong> &ndash;> &ldquo;step&rdquo; within the &ldquo;workflow&rdquo;</li>
<li><strong>card</strong> &ndash;> item (project/task/feature/workload) running through the &ldquo;workflow&rdquo;</li>
</ul>


<p>Here, the details within the card are used for describing and tracking the item or project that&rsquo;s running through the &ldquo;workflow&rdquo;.</p>

<p><img src="http://dragonfax.github.com/images/posts/2013-05-06-trello_examples_khan_academy.png">_</p>

<p>A notable feature in this pattern is that <strong>cards</strong> are often moved from <strong>list</strong> to <strong>list</strong> as a daily activity, usually serially from one <strong>list</strong> to the next. And eventually <strong>cards</strong> are removed from the <strong>board</strong> (archived) when they run off the end of the process.</p>

<h2>Other Patterns</h2>

<p>I do see a few other patterns in use but they&rsquo;re rare.</p>

<h3>Categorized List of &ldquo;Things&rdquo;</h3>

<p>This pattern uses the <strong>board</strong> as a single list of items, but with categories within that list.  Each <strong>card</strong> being one of the &ldquo;things&rdquo; that the <strong>board</strong> is listing.  And the different <strong>lists</strong> within the <strong>board</strong> are the categories.</p>

<p>Usually in this case the title of the <strong>card</strong> is all that&rsquo;s needed to describe the &ldquo;thing&rdquo;.  And the comments within the <strong>cards</strong> are simply a running commentary from various users on the &ldquo;thing&rdquo; itself.</p>

<p>Trello&rsquo;s own list of examples serves as a good representation of this pattern.</p>

<p><img src="http://dragonfax.github.com/images/posts/2013-05-06-trello_examples_trello_resources.png">_</p>

<p>Notably, in this pattern, <strong>cards</strong> are regularly added to <strong>lists</strong>, but never moved between <strong>lists</strong> or removed at all.  The <strong>board</strong> acts as a canonical list of items, without expiration.</p>

<h2>Missing Features</h2>

<p>After trying to use Trello for my own todo list management I found it rather lacking (for my own purposes, that is). I&rsquo;m still going to search for ways to use it for project planning and managing current work.</p>

<p>My habit it to use a large a powerful todo list (toodledo) for tracking most of my work backlog. Even if I were to organize all my backlog in the form of boards, lists, and cards, I&rsquo;d be missing important searching/sorting/categorization features that come along with the simple relational table model that online todo lists use.</p>

<ul>
<li><p>Merging and sorting all checklists in a board.</p>

<p>  Gather all checklists on a board into one super checklist to see what I should be working on immediately.
  Without having to dig around through cards and lists for checklists.
  This would be even more useful across boards.</p></li>
<li><p>Additional checklist details.</p>

<p>  Such as tagging checklist items with labels, and including more info for each individual checklist item.</p></li>
<li><p>Full-Text Search, across all text</p>

<p>  It wasn&rsquo;t too hard to find text elements that are not included in a Trello search. This is a little surprising.</p></li>
</ul>


<h2>Call For Papers</h2>

<p>I&rsquo;d love to see some other Trello usage patterns if anyone out there has them.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Yahoo, Ya Fucked Up]]></title>
    <link href="http://dragonfax.github.com/blog/2013/04/13/yahoo-fucked-up/"/>
    <updated>2013-04-13T14:57:00-07:00</updated>
    <id>http://dragonfax.github.com/blog/2013/04/13/yahoo-fucked-up</id>
    <content type="html"><![CDATA[<p>Note: be warned, rant ahead.</p>

<h2>The Incident</h2>

<p>My homepage is now yahoo. A site I never use, never have used, never will use.</p>

<p>My default search is now Yahoo. Again, a service I will never use. (even more so now)</p>

<p>An ugly and useless yahoo search widget is added to my toolbar. It takes up precious real-estate.</p>

<p>Worse, these changes seem to be permanent. Or at least damn close to it. After various fiddling and config settings, most of this remains. I&rsquo;m unable to correct the hacking that was done to my computer.</p>

<p>Furthermore this takes up precious time, searching, fixing, searching some more.</p>

<h2>The Culprit</h2>

<p>Of course this was was all done by some third-party extension or product I don&rsquo;t recall installing. I probably missed some tiny little button somewhere tha says, effectively, &ldquo;Please don&rsquo;t fuck up my computer.&rdquo;</p>

<p>But its all too late for that to matter now. The damage is already done.</p>

<h2>The Blame</h2>

<p>But who I&rsquo;m really angry at is Yahoo.  The way I see it, Yahoo paid someone to fuck up my computer. And I take that personally.</p>

<p>They paid someone to break my computer, and waste my time trying to fix it. And they paid alot
considering how hard it is to undo this mess.</p>

<p>They wanted to make absolutely sure that a good portion of my afternoon was ruined, correcting
this dubochery.</p>

<h2>The Plea</h2>

<p>What did I do do to you, Yahoo?  Why would you do this to me?</p>

<p>Was a lark? a laugh?  Is it some sort of revenge? Did I scowl at you in the parking lot?  Did I promise to call, and not follow through?</p>

<p>Yahoo, why did you pay someone to fuck up my computer?</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[IdeaVim: Bells and Whistles]]></title>
    <link href="http://dragonfax.github.com/blog/2013/04/11/ideavim/"/>
    <updated>2013-04-11T01:02:00-07:00</updated>
    <id>http://dragonfax.github.com/blog/2013/04/11/ideavim</id>
    <content type="html"><![CDATA[<h3>For Whom The Bell Tolls.</h3>

<p>As previously mentioned, I use VIM rather heavily, and I have some OCD behaviors when doing so, which includes hitting &lt;escape&gt; a lot. So I like to turn off the bell sounds vi makes on errors and unnecessary commands.</p>

<h3>IdeaVim</h3>

<p>I&rsquo;m also a heavy user of IdeaVim plugin for IntelliJ. I wouldn&rsquo;t be able to use IDEs at all without those plugins that add VI operation modes to the built-in editors.</p>

<p>IdeaVim doesn&rsquo;t document very well how it differs from true VIM. The project owner has taken the philosophy of building the project based on the original VIM documentation, and not the VIM source. So much so that the documentation for the plugin is just the VIM docs copied over.</p>

<p>Unfortunately they&rsquo;ve taken no time to indicate how much of that documented behavior is implemented and how much isn&rsquo;t yet.</p>

<h3>Settings</h3>

<p>One important area where VIM and IdeaVim differ is their handling of settings. IdeaVim only supports a small subset of vim commands and settings variables. But it wants to provide some convenience and backwards compatibility for existing VIM users. Their solution is to read your ~/.vimrc anyways. It simply has the behavior of silently ignoring any settings it doesn&rsquo;t understand.</p>

<p>Unfortunately IdeaVim doesn&rsquo;t understand</p>

<p><code>:set noerrorbells</code></p>

<h3>It Toles for <em>Thee!</em></h3>

<p>Fortunately IdeaVim <strong>does</strong> understand</p>

<p><code>:set visualbell</code></p>

<p>And better yet, it has no implementation for visualbells, so it simply silennces the error bell when you enact this setting. I just had to ensure the visualbell option was in my .vimrc before the noerrorbells option, so the latter would take final effect in real VIM.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[I'm just more comfortable in VI]]></title>
    <link href="http://dragonfax.github.com/blog/2013/04/10/comfortable-vim/"/>
    <updated>2013-04-10T10:54:00-07:00</updated>
    <id>http://dragonfax.github.com/blog/2013/04/10/comfortable-vim</id>
    <content type="html"><![CDATA[<p>I&rsquo;ve been using Evernote for taking notes for a while now. But I really miss taking notes in VIM.</p>

<h3>History</h3>

<p>I&rsquo;m a heavy VIM user. I use it for coding, through and though. So much so, that I use VIM-style editor wrapper plugins IDEs such as Eclipse and IntelliJ. Otherwise I find normal &lsquo;editors&rsquo; clunky and un-usable.</p>

<p>When it comes to coding I&rsquo;m clearly more productive, and happy in a VI like environment, with command modes, regular expressions, and no need for a mouse or arrow keys. It only made sense that I&rsquo;d use VIM for taking notes and tracking my work.</p>

<p>But the pull of Evernote to manage all that non-coding work was very strong.  The convenience of having notes online, available on every platform including mobile and web, is just something I couldn&rsquo;t resist.</p>

<h3>My Solution</h3>

<p>I&rsquo;ve been working on an Evernote Command Line Client in ruby for a little while now.</p>

<p><a href="http://github.com/dragonfax/rnote">Rnote</a></p>

<p>Its not yet ready for prime time, yet. Its missing the final touches. But its far enough along for me to use for my own daily note-taking.</p>

<p>The real driving force behind this project was to allow me to take notes using VIM, but still backed by Evernote.</p>

<p>I can fire up:</p>

<p><code>$ rnote edit "note title"</code></p>

<p>And rnote will pull down the note, convert it to text, and open it in a copy of VIM.  Then it watches the file and saves it back to Evernote every time I save the file in my editor.</p>

<p>Returning to VIM just feels right.</p>

<h3>Realization</h3>

<p>The interesting thing I found, when returning to VIM after a long absense, was that I&rsquo;m less afraid of change in the VIM world. Its not just a matter of simple productvity via keypress count and typing speed. But there&rsquo;s apprehension when I&rsquo;m working in an editor that&rsquo;s buried in manyl layers of disparate applications.</p>

<p>When working in a text area in a browsoer, or in an editor embedded in a desktop app, there are several layers on top of that editor. Each providing their own &lsquo;modes&rsquo; and shortscuts and commands. Each taking priority over the other for different types of input. And each capable of changing the your entire world in the middle of an editing session, with one bad keypress.</p>

<p>If I fat finger a typing sequence in some custom editor, anything can happen. And the results, I&rsquo;ve found, can be unexpected and incomprehensible. I&rsquo;ve had experiences where the cursor leaps to a random location in the text, drops a few lines from the text, and starts adding new characters after breaking the formatting that was already there. Other situations have seen my input leap to another document, and start making changes there. And then there is the worse case scenerio of the window just closing altogether, lossing of editor history, and without any sort of save.</p>

<p>VIM is an environment I can predict. And its only one environment providing the UI.  No matter what happens, I know all I have to do is hit &lsquo;u&rsquo; and magically any bad typing sequence is completely undone. And best of all, if I did type something wrong, I probably know what it was from the effects that occured. Because VIM has a consice and regular interface that hasn&rsquo;t changed over the years, and doesn&rsquo;t change between nvironments.</p>

<p>Of course, I lose WYSIWYG formatting (do we still use that word?), such as bold, italic, and font sizes.  But I don&rsquo;t really miss them.  And I get back indentation, a powerful organization tool. Just ask the python guys.</p>

<h3>Plans</h3>

<p>I&rsquo;m planning to add markdown support, so that I cna have the best of both worlds: pure text editing, but also allow for some formatting. I&rsquo;m already used to markdown elsewhere in the web, such as octopress and github.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[run anywhere]]></title>
    <link href="http://dragonfax.github.com/blog/2013/03/12/run-anywhere/"/>
    <updated>2013-03-12T14:04:00-07:00</updated>
    <id>http://dragonfax.github.com/blog/2013/03/12/run-anywhere</id>
    <content type="html"><![CDATA[<div><script src='https://gist.github.com/5146987.js'></script>
<noscript><pre><code></code></pre></noscript></div>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Creating Command Line Tools in Ruby]]></title>
    <link href="http://dragonfax.github.com/blog/2013/03/09/creating-command-line-tools-in-ruby/"/>
    <updated>2013-03-09T19:48:00-08:00</updated>
    <id>http://dragonfax.github.com/blog/2013/03/09/creating-command-line-tools-in-ruby</id>
    <content type="html"><![CDATA[<h2>A Beginners Guide</h2>

<p>I use RubyMine without doing any rails and doing just what you ask. I write a lot of simple scripts, and large applications, both often usable from a command line.</p>

<p>I still organize my code into a &lsquo;project directory&rsquo;. And point RM at that directory. Instead of just working entirely in a file, and trying to point RM at the file alone. This seems to be what IDE&rsquo;s prefer. This lets RM create its <code>.idea</code> directory to hold all of its project related settings.</p>

<p>This may mean that some projects consist of nothing more than a directory (for the project) and a single file in that directory (the single script which is really the only content in that project).</p>

<h2>Benefits of a Project Directory</h2>

<p>You&rsquo;ll soon find you add more files to any project anyways. Both additional coding and various utilities which are part of the great benefit of ruby.</p>

<ul>
<li>gem</li>
<li>rake</li>
<li>tests</li>
</ul>


<p>The <code>project directory</code> pattern, also lets you version the code with popular VCS such as git, and even upload to social coding sites like github.</p>

<h2>Project Setup</h2>

<p>I don&rsquo;t bother with any sort of &ldquo;project type&rdquo;. In fact I don&rsquo;t create projects from with RubyMine at all. I just create a directory, and then open that directory with RM (whether from the File Menu, or via the &ldquo;mine&rdquo; command line tool that RM installs).</p>

<p><code>project/</code></p>

<p>Of course <code>project</code> isn&rsquo;t the real name of the project, or the directory I create, I&rsquo;m just using it as a generic name here. I would actually name the directory (and project) after the scripts or subject matter of the work they do.</p>

<p>NOTE: <em>currently there is a bug in the <code>mine</code> command in RM 5 where it won&rsquo;t open a second project window.</em></p>

<p>Obviously if this is a project that includes any command line scripts I&rsquo;ll put those in a <code>bin</code> directory, just for organization purposes. I don&rsquo;t like to clutter the root project directory with all sorts of things. There are too many tools that <em>require</em> their settings files in the project root, so the fewer the better.</p>

<p><code>project/bin/</code></p>

<p>Like I said, various other utilities prefer their settings files in the project root, so you may find yourself using some of them.</p>

<pre><code>project/Gemfile
project/Rakefile
project/project.gemspec
project/README.md
project/.rdoc_options
...
</code></pre>

<p>As soon as I have some automated testing for the scripts (which I admit isn&rsquo;t immediate) I put all test code under a <code>test</code> directory, but I further categorize those according to the scope of the tests or how often I would run them during development. And I&rsquo;ll go so far as to add quck Rake tasks that are just aliases for the commands necessary to run the tests. So I dont&#8217; have to remember which test runner, or type the full paths each time.</p>

<pre><code>project/test/
project/test/unit/
project/test/unit/some_component_test.rb
project/test/integration/
</code></pre>

<p>Finally, as the project grows, and I add more scripts or want to reuse some of the code within external projects, I&rsquo;ll add a <code>lib</code> directory, and use some standard practices for how to organize that.</p>

<pre><code>project/lib/
project/lib/project.rb
</code></pre>

<p>And as the project continues to grow and get more complicated, more organization of the content is required, after a little refactoring. Note the <code>cmd</code> directory to contain the actual top-level code of various workflows a particular script can go through.</p>

<pre><code>project/lib/project/
project/lib/project/other_stuff.rb
project/lib/project/cmd/
project/lib/project/cmd/one_command.rb
project/lib/project/cmd/another_command.rb
</code></pre>

<p>Of course the original <code>project.rb</code> &lsquo;requires&rsquo; all of these lib files. Ruby loads pretty fast, so I don&rsquo;t bother too much with managing dependencies between the ruby files within the same project. Its really all about code readability.</p>

<h2>Better Command Line Apps</h2>

<p>There is nothing wrong with starting with a single script file and writing minimal boiler plate coding. And thats probably the best way to start.</p>

<pre><code>#!/usr/bin/env ruby

=begin

this is a script blah which does whatever

EXAMPLE

$ script &lt;options&gt; &lt;arguments

=end

def main(args)
  whatever
end

main(ARGV)
exit(0)
</code></pre>

<p>But writing even better command line apps in ruby is pretty easy. There are popular gems which handle a lot of the infrastructure for you.</p>

<p>You can start with something as simple as <a href="http://ruby-doc.org/stdlib-1.9.3/libdoc/optparse/rdoc/OptionParser.html">OptionParser</a></p>

<p>Then as you build more code in your scripts you can graduate to a bit more infrastructure with a gem like <a href="https://github.com/davetron5000/methadone">Methadone</a></p>

<p>Finally, when you&rsquo;re writing full blown command line applications, with many &ldquo;internal&rdquo; commands like &ldquo;git submodule init <repo>&rdquo;, you can ascend to something much more heavy-weight like <a href="https://github.com/davetron5000/gli">GLI</a></p>

<h2>Testing Command Line Apps</h2>

<p>Unit testing is the pretty much the same, no matter what type of application your writing. You&rsquo;re not using real services or combining components, but just isolating the internal components and using them in a purely internal manner. So not much changes there for command line tools.</p>

<p>But when it comes to integration or full command-line testing of my scripts, I&rsquo;m actually a big fan of <code>cucumber/aruba</code>. I&rsquo;m not big on TDD, I&rsquo;m a bit too pragmatic for that. But for command line tools, the series of use cases is already laid out pretty plainly in the set of options available. Even for interactive commands this makes a series of <code>feature</code> files conveniently double as documentation for the tool.</p>

<pre><code>Feature:
  Create and manipulate notes in Evernote.

  Background:
    Given I am logged in as me
    And I have 0 notes

  Scenario: Show note
    Given that I have 1 note named "foo" with content "bar"
    When I run `rnote show note --title "foo"`
    Then the output should contain "bar"

  Scenario: Show note, from multiple notes
    Given that I have 2 notes named "foo"
    When I run `rnote show note --title "foo"` interactively
    And I type "1"
    Then the output should contain "foo"
</code></pre>

<h2>Installation</h2>

<p>As for installation and packaging for your scripts, so that they can be shared and reused by the rest of the world, look no further than the same &lsquo;gem&rsquo; utility that you&rsquo;ve already been using all along in ruby for depenencies.</p>

<p>The <code>gemspec</code> you create when writing a new gem to share, can be told about your scripts and other command line utilities. It will then wrap them up with the rest of your code, install them in a good location, and even fix up the PATH so the user can find them when the time comes.</p>

<p>In fact this works so well, your gem can be composed of nothing but these <code>bin</code> scripts. With no other re-usable code included.</p>

<p><a href="https://github.com/dragonfax/cat-dog">cat-dog</a> is a harmless little gem I whipped up as an example for something else. It contains no lib directory at all and no other ruby other than a single command line script.</p>

<h2>Ruby Without Rails</h2>

<p>I&rsquo;ve run into a lot of Rails developers who aren&rsquo;t cognisant of what <em>is</em> Rails and what <em>is</em> ruby. i.e. what you&rsquo;re left with when you remove the Rails. Obviously the server and templating, databasing, MVC are all gone, as are a portion of convenience methods added to every-day objects.</p>

<p>The goods new is that you&rsquo;re still left with quite a lot. And if you find you miss something, its easy to add it back in with by including a gem or two. For instance, if you enjoy using an ORM like active-record it can be included back into your application, without rails, with little fuss.</p>

<pre><code>require 'activerecord'
</code></pre>

<h2>Full Featured RubyMine</h2>

<p>Finally, using RubyMine features more heavily during development. Everything available when working with rails is available for command line applications.</p>

<p>You can run your commands from RM and use its debugger just the same as rails.
Just like any IDE you can set up &ldquo;run&rdquo; profiles with the arguments you want to test the script on, and run or debug the script through the IDE. Personally, I never use a command-line debugger. If I need to fire up a debugger to troubleshoot some issue, then I&rsquo;ll launch the program in an IDE. The benefits of an IDE debugger with &ldquo;heads-up&rdquo; display of all the pertinent details, and visually following the script through execution, is just irreplaceable.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Nesting Pry]]></title>
    <link href="http://dragonfax.github.com/blog/2013/03/07/nesting-pry/"/>
    <updated>2013-03-07T01:49:00-08:00</updated>
    <id>http://dragonfax.github.com/blog/2013/03/07/nesting-pry</id>
    <content type="html"><![CDATA[<div><script src='https://gist.github.com/5113407.js'></script>
<noscript><pre><code></code></pre></noscript></div>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ruby local]]></title>
    <link href="http://dragonfax.github.com/blog/2013/02/28/ruby-local/"/>
    <updated>2013-02-28T06:52:00-08:00</updated>
    <id>http://dragonfax.github.com/blog/2013/02/28/ruby-local</id>
    <content type="html"><![CDATA[<div><script src='https://gist.github.com/5052542.js'></script>
<noscript><pre><code></code></pre></noscript></div>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Choosing a Technology]]></title>
    <link href="http://dragonfax.github.com/blog/2013/02/24/choose-a-language/"/>
    <updated>2013-02-24T02:32:00-08:00</updated>
    <id>http://dragonfax.github.com/blog/2013/02/24/choose-a-language</id>
    <content type="html"><![CDATA[<p>How I choose to work has changed over the years, naturally.
Learning new technologies and techniques.
New hammers and tools to put on my belt.</p>

<p>An important part of this was how I went about
choosing what technologies to associate myself with.
I didn&rsquo;t just let people set things down in front of me, and choose my paths for me.
I constantly researched and pro-actively vetted technological choices.
Its been a constant daily regimine.</p>

<p>A notable area of focus for programmers is the choice a programming language to use for any given peice of code.
And this serves, ideally, as a great example to show how these patterns have changed over the years.</p>

<p>Let me describe this in 3 phases.</p>

<h2>When I was young</h2>

<p>When I was a new programmer, my focus was entirely on what language seemed best for me.</p>

<p>Not simply what matched my world view,
but also what forced me to absorb new ideas and concepts.
What allowed for my personal productivity, but also my personal growth.</p>

<p>Also, at this stage it was all about what the &ldquo;best langugae&rdquo; was.
As opinionated as I was, I never considered adding a &ldquo;for me&rdquo; to the end of that
statement to better qualify it as purely a personal journey.
I was in a world of absolutes, and languages were something I could qualitatively compare.</p>

<p><strong>When I was young, I chose the best language for myself.</strong></p>

<h2>As I matured</h2>

<p>As I matured and gained in experience and languages,
I grew to see that there was no superior choice, across the board.
Different tools are simply better at different jobs.</p>

<p>Its not a good carpenter that judges all of his work should be done with a hammer.
But to apply the hammer to the nails and the saw to the wood.</p>

<p>Learning a language was just pre-emptive maneuver to ensure I could make the right choice
for each task that came up. And I knew that choice would change from job to job.
Each languaging becoming a table of pros and cons, with some lending to certain techniques
but performing poorly with others.</p>

<p><strong>As I matured, I chose the right language for the project.</strong></p>

<h2>Deep into my career</h2>

<p>Years later, as I&rsquo;ve touched on most major technologies my world view has shifted yet again.</p>

<p>Truth be told, you can do pretty much anything with any programming language.</p>

<p>Yes, there are still pros and cons to languages, and language agnostic techniques as well.
There are differences in availablity and quality of 3rd party libraries and even in the communities
that follow them.</p>

<p>But what it really comes down to is not how <em>I&rsquo;m</em> going to use the language,
Or even how the project is going to use the language.
But, rather, how the people are going to use the language.</p>

<p>Those team-members I have to work with now.
Those developers that may have to maintain this code in the future.
Those engineers that may have to make other technology decisions based
on the content of the projects and work I do.</p>

<p><strong> As a Late-Career Software Engineer, I make the choice based on the people, team, and company. </strong></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Git & Gitorious]]></title>
    <link href="http://dragonfax.github.com/blog/2011/06/02/git-gitorious/"/>
    <updated>2011-06-02T18:02:00-07:00</updated>
    <id>http://dragonfax.github.com/blog/2011/06/02/git-gitorious</id>
    <content type="html"><![CDATA[<div class='post'>
I&#8217;m trying to promote code sharing and code review and open source ideas, internally at my company. I setup a copy of gitorious on our intranet and we&#8217;re starting to commit projects into it.
<p>

I whipped up a quick overview of Git and Gitorious to share with my coworkers to make them more comfortable with the systems and get them started. Its not entirely technically accurate but it reflects how I view the systems.
<p>




<style type="text/css"><!--
.wiki-content h1, .wiki-content h2 {
 border-bottom: 1px solid #919699;
 margin-top: 1em;
 margin-bottom: 1em;
}
.wiki-content p {
 margin-bottom: 1em;
}
--></style>



<div class="wiki-content">

<div>
<ul>
    <li><a href='#GitandGitorious-Gitorious'>Gitorious</a></li>
<ul>
    <li><a href='#GitandGitorious-GitoriousElements'>Gitorious Elements</a></li>
<ul>
    <li><a href='#GitandGitorious-Users'>Users</a></li>
    <li><a href='#GitandGitorious-Teams'>Teams</a></li>
    <li><a href='#GitandGitorious-Projects'>Projects</a></li>
    <li><a href='#GitandGitorious-Repositories'>Repositories</a></li>
</ul>
    <li><a href='#GitandGitorious-gettingstarted'>getting started</a></li>
    <li><a href='#GitandGitorious-WebAccesstoRepositories'>Web Access to Repositories</a></li>
    <li><a href='#GitandGitorious-AccessControl'>Access Control</a></li>
<ul>
    <li><a href='#GitandGitorious-Projects'>Projects</a></li>
    <li><a href='#GitandGitorious-Repositories'>Repositories</a></li>
</ul>
    <li><a href='#GitandGitorious-CodeReviewandForkbasedDevelopment'>Code Review and Fork-based Development</a></li>
<ul>
    <li><a href='#GitandGitorious-CloningRepos'>Cloning Repos</a></li>
    <li><a href='#GitandGitorious-MergeRequests'>Merge-Requests</a></li>
</ul>
</ul>
    <li><a href='#GitandGitorious-Git'>Git</a></li>
<ul>
    <li><a href='#GitandGitorious-DVCSvsVCS'>DVCS vs VCS</a></li>
<ul>
    <li><a href='#GitandGitorious-%22Traditional%22versioncontrol%2CorVCS'>&#8220;Traditional&#8221; version control, or VCS</a></li>
    <li><a href='#GitandGitorious-TheNewWay%2Corthe%22D%22inDVCS'>The New Way, or the &#8220;D&#8221; in DVCS</a></li>
</ul>
    <li><a href='#GitandGitorious-Everyonehasarepo'>Everyone has a repo</a></li>
    <li><a href='#GitandGitorious-Eachrepoisdifferent.'>Each repo is different.</a></li>
    <li><a href='#GitandGitorious-HashesasaGUID'>Hashes as a GUID</a></li>
    <li><a href='#GitandGitorious-DVCSCommandsandConcepts'>DVCS Commands and Concepts</a></li>
<ul>
    <li><a href='#GitandGitorious-TheOld'>The Old</a></li>
    <li><a href='#GitandGitorious-TheNew'>The New</a></li>
</ul>
    <li><a href='#GitandGitorious-ForSubversionUsers'>For Subversion Users</a></li>
    <li><a href='#GitandGitorious-AdvancedConcepts'>Advanced Concepts</a></li>
<ul>
    <li><a href='#GitandGitorious-TheIndex'>The Index</a></li>
    <li><a href='#GitandGitorious-layers'>layers</a></li>
<ul>
    <li><a href='#GitandGitorious-EfficientBlobStorage'>Efficient Blob Storage</a></li>
    <li><a href='#GitandGitorious-BlobDatabase'>Blob Database</a></li>
    <li><a href='#GitandGitorious-FileSystemTrees'>File System Trees</a></li>
    <li><a href='#GitandGitorious-HistoryGraph'>History Graph</a></li>
    <li><a href='#GitandGitorious-OtherVCSMetadata'>Other VCS Metadata</a></li>
</ul>
    <li><a href='#GitandGitorious-HistoryEditingandAmending'>History Editing and Amending</a></li>
</ul>
</ul>
</ul></div>

<h1><a name="GitandGitorious-Gitorious"></a>Gitorious</h1>



<p>Gitorious is web-based project and repository management software.  It just lets us create multiple repos and manage them into projects, teams and whatnot.</p>


<div class='panelMacro'><table class='warningMacro'><colgroup><col width='24'><col></colgroup><tr><td valign='top'></td><td><b>Warning: All Code Public</b><br />All code uploaded to the site is visible to everyone within the corporate network. So scrub code for passwords and other credentials before uploading.</td></tr></table></div>


<h2><a name="GitandGitorious-GitoriousElements"></a>Gitorious Elements</h2>

<p>There are only 4 different major types of &#8220;things&#8221; in Gitorious.</p>

<ul>
 <li>Users</li>
 <li>Teams</li>
 <li>Projects</li>
 <li>Repositories</li>
</ul>


<h3><a name="GitandGitorious-Users"></a>Users</h3>

<p>You and me. Just create your account. Don&#8217;t forget to add an ssh key after you login so you can upload code.</p>

<h3><a name="GitandGitorious-Teams"></a>Teams</h3>

<p>This is just a group of users. A user can be in many teams at once. These teams are just logical units to give access to whole projects and repositories at once. Without having specify individual members. Projects can also be &#8216;owned&#8217; by a team instead of just a user.</p>

<h3><a name="GitandGitorious-Projects"></a>Projects</h3>

<p>Projects can be owned by teams or by users. Its just a place to group your repositories into. You may have a project for each repo. Or put a couple related repos in the same project.</p>

<p>Each project also gets its own mini wiki, which is not full features but convenient for small documentation, project and repo descriptions. And the project&#8217;s mini-wiki is versioned using git.</p>

<p>When you create a repo, it has to be created in an existing project. Which is just good practice anyways. But when you clone a repo, it has no project associated with it (for convenience as well).</p>

<h3><a name="GitandGitorious-Repositories"></a>Repositories</h3>

<p>git repositories. This is the nitty gritty. Its where the source actually goes. There are some good-practices outlined further below on how to decide what goes in a repository.</p>

<p>gitorious provides several methods for access to the repository. The 2 methods we have enabled are <b>ssh</b> and <b>git-protocol</b>. The git protocol has no authentication mechanism so it provides read-only access to the repo. The ssh protocol uses a public key you upload to gitorious, to authenticate you and allow for read/write access to your repos (but only your repos).</p>


<h2><a name="GitandGitorious-gettingstarted"></a>getting started</h2>

<p>1. Create an account</p>

<p>The site isn&#8217;t connected to LDAP so you&#8217;ll have to create your account manually. No email verification is required though, you can log in immediately.</p>

<p>2. Join or create any useful teams.</p>

<p>This is optional. You don&#8217;t need to be on a team in Gitorious to us the site to its fullest. But teams allow you to give write permission to your projects and repos to multiple people easily. It also acts as a useful form of organization.</p>

<p>3. Create projects and repos</p>

<p>Generally you&#8217;ll create a repo for each app you want to share the source for. And you may create a project for it as well. But you may create multiple repos in the same project if or put multiple applications/source trees in the same repo. Its your personal preference.</p>

<p>4. Share your code.</p>

<p>You can upload your code to your repositories. Remember to clone the gitorious repo first using the ssh url, and to upload an ssh public key so you can get write access to your repo.</p>

<div class='panelMacro'><table class='infoMacro'><colgroup><col width='24'><col></colgroup><tr><td valign='top'></td><td><b>Create Away</b><br />All objects and metadata can be easily remove or replaces so feel free to create them with recless abandon.<br/>
We can always split projects and repos later, or move other things around.</td></tr></table></div>

<h2><a name="GitandGitorious-WebAccesstoRepositories"></a>Web Access to Repositories</h2>

<p>As any decent source repository management site, gitorious provides a simple web-based repository browser, so that you can browse the repository without having to clone it first. You can also browse the history of the repo.</p>

<h2><a name="GitandGitorious-AccessControl"></a>Access Control</h2>

<div class='panelMacro'><table class='warningMacro'><colgroup><col width='24'><col></colgroup><tr><td valign='top'></td><td><b>Warning: All Code Public</b><br />All code uploaded to the site is visible to everyone within the corporate network. So scrub code for passwords and other credentials before uploading.</td></tr></table></div>

<h3><a name="GitandGitorious-Projects"></a>Projects</h3>

<p>You can set who can edit and write to projects. You can add teams or individuals to a project.</p>

<h3><a name="GitandGitorious-Repositories"></a>Repositories</h3>

<p>You can assign teams and individuals in 3 different capacities when it comes to repositories.</p>
<ul>
 <li>Commiters</li>
 <li>Reviewers</li>
 <li>Administrators</li>
</ul>


<p>Users and teams can be assigned any combination of these 3 roles for a repository. Commiters can update changes to the git repository. Reviewers can manipulate merge-requests. And administrators can edit the repo metadata in gitorious.</p>

<h2><a name="GitandGitorious-CodeReviewandForkbasedDevelopment"></a>Code Review and Fork-based Development</h2>

<h3><a name="GitandGitorious-CloningRepos"></a>Cloning Repos</h3>

<p>Just as you can use the 2 methods described further above to download/clone git repos to your local machine. You can also request that gitorious clone the repo for you in gitorious. Doing this, it can track metadata about the repo relationships and enable some more advanced features, such as watching repos and performing merge-requests.</p>

<h3><a name="GitandGitorious-MergeRequests"></a>Merge-Requests</h3>

<p>This is an advanced feature, but it bares mentioning. If you have a repo in gitorious cloned from another repo also in gitorious, and you&#8217;d like to submit your changes to be pushed up the line back to the origin of the source. You can submit a merge requests, and the original authors can work with you in a simple form of code-review.</p>


<h1><a name="GitandGitorious-Git"></a>Git</h1>


<p>This isn&#8217;t a tutorial on using Git. Its just a overview of the DVCS, the concepts there-in, and how DVCS differ from traditional VCS. You can find a great deal of presentations, tutorials, and documentation online for git which will better serve your needs if your trying to get started using it.</p>

<div class='panelMacro'><table class='infoMacro'><colgroup><col width='24'><col></colgroup><tr><td valign='top'></td><td><b>Git Parlance</b><br />git documentation and proponents use alot of lexicon that they pretend describe new concepts in version control. When in actually they are just refering to concepts that have existed in VCS for decades but are simply for flexible now with the advent of DVCS. I&#8217;ll try to point out when I&#8217;m using this vocabulary.</td></tr></table></div>

<h2><a name="GitandGitorious-DVCSvsVCS"></a>DVCS vs VCS</h2>

<h3><a name="GitandGitorious-%22Traditional%22versioncontrol%2CorVCS"></a>&#8220;Traditional&#8221; version control, or VCS</h3>

<p>ala subversion or CVS.</p>

<ul>
 <li>centralized authoritative location for the source code. defined by both owners, and the software.</li>
 <li>client and server are seperate entities.</li>
</ul>


<h3><a name="GitandGitorious-TheNewWay%2Corthe%22D%22inDVCS"></a>The New Way, or the &#8220;D&#8221; in DVCS</h3>

<p>ala git or mercurial</p>

<p>The &#8220;D&#8221; refers to &#8220;decentralized&#8221; version control.</p>

<ul>
 <li>no central authoritative location. defined by the software.</li>
 <li>the authoritative location for the source defined only by convention.</li>
 <li>no difference between client and server. we&#8217;ll just call it a &#8220;client&#8221; here though.</li>
</ul>


<p>This means that the software and internals of the VCS are designed so there is no enforcement about who controls the source.<br/>
Everyone working on the source is equal (in the eyes of the VCS). This includes the location that the team defines as the authoritative (canon) location for the source code.</p>

<p>Its still common to have a central repository even in DVCS. Where the team members submit their final code changes to. But the benefits come in having the VCS designed around not mandating a central location.</p>

<h2><a name="GitandGitorious-Everyonehasarepo"></a>Everyone has a repo</h2>

<p>In traditional VCS the user usually gets just the minimal amount of data required to work on the code at the moment.</p>

<p>When they pull a &#8220;working copy&#8221; of the source tree, they get just the branch they need. And they get just the subtree that they need of that branch. They usually don&#8217;t get any history in their &#8220;working copy&#8221;, just the immediately files and HEAD version. All of the other details are easily accessible from the central server if needed for a complex operation.</p>

<p>In git, the &#8220;repository&#8221; and the &#8220;working directory&#8221; are one in the same. When you get a working copy from some other repo. Your just copying the entire repository to a new local one. And that repository becomes your working copy. The files are ready to be worked with. All the history and other VCS details are hidden in a .git subdirectory.</p>

<p>This may seem a rather heavy-weight operation, but at the same time, in git, you tend to create smaller repositories. Unlike traditional VCS where you put all your projects and applications in the same repo. In git you&#8217;ll create a separate repo for each project or application. So the size remains manageable. Furthermore, in git, while you can&#8217;t clone just a subtree of a repo, you can clone only a single branch or subset of the repos branches. In fact its quite common just to clone the single branch your interested in&#8230; say the &#8220;master&#8221; branch (same thing as &#8220;trunk&#8221; in svn or cvs).</p>


<p>If your working on the code in several locations, each location will actually be a separate repo. Possibly with a different set of branches in it.</p>

<p>This is another important concept in git. Even though we all have a repo for the project, the repos are not identical. And they don&#8217;t need to be.</p>

<h2><a name="GitandGitorious-Eachrepoisdifferent."></a>Each repo is different.</h2>

<p>This is not just because we have our own private changes in our repo, that we haven&#8217;t yet shared with others. But each repo also <ins>knows</ins> its a different one from all the others. This is how we keep from stepping on each others toes when we are all working on similar branches/code. git knows that Marks &#8220;master&#8221; branch is actually a different branch than Sue&#8217;s &#8220;master&#8221; branch. And you have to address them as such if you really want to work with both in the same operation.</p>

<h2><a name="GitandGitorious-HashesasaGUID"></a>Hashes as a GUID</h2>

<p>To deal with the issues of multiple repos, git tracks everything in the repo using secure message digests (hashes) of their content. This acts as a good GUID for these objects so that no matter where they came from or when, if they&#8217;re identical, then it can identify them as such. This also makes comparing objects faster. The system uses this for files, directories, and history as well.</p>

<p>Unfortunately there are a few gotchas to keep in mind with this. For instance the same source tree can results from 2 different histories. So that can cause some complications, when deciding who&#8217;s history is more useful to keep around. But most users don&#8217;t have to worry about that at the beginning.</p>

<h2><a name="GitandGitorious-DVCSCommandsandConcepts"></a>DVCS Commands and Concepts</h2>

<h3><a name="GitandGitorious-TheOld"></a>The Old</h3>

<p>Generally DVCS work the same as VCS and you&#8217;ll see similar commands and concepts.</p>

<ul>
 <li>branch</li>
 <li>commit</li>
 <li>log/history</li>
 <li>diff</li>
 <li>tag</li>
</ul>


<h3><a name="GitandGitorious-TheNew"></a>The New</h3>

<p>Where DVCS is different tends to be in what it adds on top of the existing VCS. Here are some commands you&#8217;ll find new.</p>

<ul>
 <li>push</li>
 <li>pull</li>
 <li>clone</li>
 <li>amend</li>
</ul>


<p>But not entirely new. push, pull, and clone are similar to checkout and commit, but between repositories, since there is no separate working copy. And amend is an advance concept you may never use.</p>

<h2><a name="GitandGitorious-ForSubversionUsers"></a>For Subversion Users</h2>

<p>I found this mapping between svn and git commands helpful, when I first switched to using git for some projects.</p>

<p> <span class="nobr"><a href="http://git.or.cz/course/svn.html" class="external-link" rel="nofollow">http://git.or.cz/course/svn.html<sup></sup></a></span></p>

<p>git can also work with svn repos directly. you usually do this by replicating the svn repo into a git repo.<br/>
then working with the git repo. But you can do bi-directional replication between the two, and continue to use<br/>
both repos for future versioning, side-by-side.</p>

<p> <span class="nobr"><a href="http://www.kernel.org/pub/software/scm/git/docs/git-svn.html" class="external-link" rel="nofollow">http://www.kernel.org/pub/software/scm/git/docs/git-svn.html<sup></sup></a></span></p>

<p>It can be a little complicated to use and there are better example workflows of it online as well.</p>

<h2><a name="GitandGitorious-AdvancedConcepts"></a>Advanced Concepts</h2>

<p>Some advanced concepts you don&#8217;t need to understand to use git. but that might be interesting if your going to delve further into git.</p>

<h3><a name="GitandGitorious-TheIndex"></a>The Index</h3>

<p>git commands can work on a staging area for the changeset before its commited to the repository. This staging area is called the <b>index</b>. You can flag files/directories for commital, as your working on the source. And when you do, it will actually copy the state (content) of those files and directories, at that time, into the staging area. Then, later, when you commit, that staging area is what is commited to the repository. not the actual current state of the source tree. This allows or a specifically control partial-source commit.</p>

<p>This can be useful or annoying. I find it the latter, and as such I completely ignore this feature. Instead I use git commands that ignore the staging area and commit the current state of the source tree all or none. automatically commiting changes to any files that were previously commited to the repo, and in some cases even commiting new files to the repo automatically.</p>

<p>But using the commands that work with the index can provide for some more advanced usage of git. Such as performing more fine-grained commit history, or quickly switching to temporary branches for quick fixes, and then switching back to your main work.</p>

<h3><a name="GitandGitorious-layers"></a>layers</h3>

<p>The architecture of git is rather simple and it benefits to understand this when you start using git more heavily. Its effectively composed of a series of layers.</p>

<ol>
 <li>Efficient Blob Storage</li>
 <li>Blob Database</li>
 <li>Filesystem Trees</li>
 <li>Version History Graphs</li>
 <li>Other VCS Metadata: branches, tags, head&#8230;</li>
</ol>


<p>I won&#8217;t go into the details of whats stored in the blobs, and the filesystem/version graphs, as there are good presentations online that describe these more effectively.</p>

<h4><a name="GitandGitorious-EfficientBlobStorage"></a>Efficient Blob Storage</h4>

<p>In relational databases, a Binary Large Object (BLOB) is a chunk of arbitrary binary data of arbitrary size.</p>

<p>Git starts with a system that efficiently stores blobs by diffing related/similar blobs, and then compressing them. But the details of this are always hidden to the user as its not necessary to understand them. And every VCS implements such a system anyways.</p>

<h4><a name="GitandGitorious-BlobDatabase"></a>Blob Database</h4>

<p>git then takes these blobs and puts them into a simple relational database of only one table. which contains the blob column and a few columns of metadata.</p>

<p>git uses a hash of the blob as the primary key and provides commands to manipulate the rows of this database directly from the command line. Most users never have to do this but sometimes it can become necessary if the repo becomes corrupt, data is deleted by accident, or someone messes up some advanced command.</p>

<h4><a name="GitandGitorious-FileSystemTrees"></a>File System Trees</h4>

<p>Two types of data git will store in these blobs are files and directories.</p>

<p>How files are stored is obvious; it stores the content in the blob. By hashing the files, you get immediate duplicate reduction.</p>

<p>But to store directories it builds a tree of blobs, one for each directory. The blob contains the list of files and directories in the directory, and their hashes. This makes for a rather efficient storage of directories in the table, as subtrees that don&#8217;t change, never need to be modified or replicated in the database. Furthermore identical subtrees can automatically detected in this manner.</p>

<h4><a name="GitandGitorious-HistoryGraph"></a>History Graph</h4>

<p>Similar to the directories stored in blobs, the system stores in blobs the Directed Acyclic Graphs that comprise history trails for source versions. And by hashing the elements of the history, you get similar benefits to the filesystem storage.</p>

<h4><a name="GitandGitorious-OtherVCSMetadata"></a>Other VCS Metadata</h4>

<p>Finally, on top of all of this, git adds the other CVS metadata required, such as branches and tags, and which version is the HEAD. All in order to round git up into a fully featured modern version control system.</p>

<h3><a name="GitandGitorious-HistoryEditingandAmending"></a>History Editing and Amending</h3>

<p>Since a git repo is really just a kind object or blob relational database, git commands expose that database directly for you to play with. And in fact make it easy to play with the objects and graphs stored in that database. One thing that git allows you to do easily is to modify commits that are already in the database, and to change the history graphs that lead to a particular version of the source tree.</p>

<p>These features are usually avoided because if your not careful you can permanently delete data that&#8217;s in the repository, or worse, surprise someone else who has already cloned the data that your changing.</p>


</div></div>
<h2>Comments</h2>
<div class='comments'>
<div class='comment'>
<div class='author'>Jason Stillwell</div>
<div class='content'>
Thanks, I&#39;m usually watchful of that, but I wrote this document quickly.</div>
</div>
<div class='comment'>
<div class='author'>AHAntics</div>
<div class='content'>
I&#39;d (almost) do a search and replace s/your/you&#39;re/gi <br /><br />You&#39;re is a contraction of &quot;you are&quot; - you&#39;re making a grammatical error and sending it to the team. <br />Your is a possessive pronoun - that repository is yours, not mine.</div>
</div>
<div class='comment'>
<div class='author'>Jason Stillwell</div>
<div class='content'>
Feedback is, of course, welcome.</div>
</div>
</div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Context IOC]]></title>
    <link href="http://dragonfax.github.com/blog/2011/03/18/context-ioc/"/>
    <updated>2011-03-18T17:40:00-07:00</updated>
    <id>http://dragonfax.github.com/blog/2011/03/18/context-ioc</id>
    <content type="html"><![CDATA[<div class='post'>
I&#8217;d been doing this for a years, but had no idea there was a name for it.  For me it came out of unit testing UIs.  I found my widget classes would have a lot of dependenciees.  But they&#8217;d only end up using each dependency for a one or two small things each.  It seems a shame to pass in the whole object just for that.  Also this left me with alot to mock in my unit tests.
<p/>

  So with a quick interface, I found I could declare the dependencies to a much finer grain of details.  It just seemed like a good way to decouple objects.  It makes writing unit tests fast because each class clearly states exactly what its going to use in its dependencies.  And when you change one thing in the code, static analysis tells you everything that is affected by it with far fewer false positives.
<p/>

<h2>Practices, maybe not &#8220;Best&#8221;</h2>
<p/>

<ul>
<li>
I&#8217;ve been naming the interfaces &#8216;Dao&#8217; because that just seemed to make sense at the time.  I may start using &#8216;Context&#8217; now.
  </li>

<li>
I found that embeding the interface, nested inside the class that used it, seemed like good information architecture.  I know alot of people dont&#8217; like nesting classes and interfaces.  But it avoids a lot of clutter in the packages, as I&#8217;ll often have a ton of these interfaces, one for every class.
  </li>

<li>
Outside of tests, I never create a whole class that does nothing but implement one of these Dao interfaces.  The methods in the Dao came out of something that the class needed from another class (a dependency). So the Dao interface just turned out to be extra interfaces implemented by the dependency class. Not defining the dependency class, but rather performing some duck-typing for us.
  </li>
</ul>
<p/>

Here is a quick example of what a class might look like that uses such an interface to declare its dependencies.
<p/>

<pre class="brush: java">
  public class SomeWidget {
 
    public interface Dao {
      void setSomeValue(SomeValue value);
      SomeOtherValue getSomeOtherValue();
      void doThis();
      void doThat();
      void saveYourWork();
      void requestExitOfApplication( String reason );
      void notifyCamelHairListeners( CamelHairEvent event);
    }

    private Dao dao;

    public SomeWidget(Dao dao) {
      this.dao = dao;

      // add various widgets this one.
      // which call on the Dao to do the work behind them.
      ...
    }

  }


  // and when testing
  public class SomeWidgetDaoMock implements SomeWidget.Dao {
    ...
  }
</pre>
<p/>


  The methods defined in these Daos usually wouldn&#8217;t be return actual dependencies.  Instead they would contain the abstract methods that the class needed from those dependencies.
<p/>

  An exception I make is for some higher level Daos in an application.  When one dao interface implementor may need to act as a factory to create the dependencies.
<p/>

<h2>Composition</h2>
<p/>

  For building up the Doas in your large application you have many choices such as composiing Daos from sub interfaces or using Dao factories ( Daos just for retrieving other Daos ).
<p/>
<pre class="brush: java">
  public class Application {

    // you only need to define one of these 2 interfaces

    // sub interface Dao
    public interface SubInterfaceDao implements SomeWidget.Dao {
    }


    // Dao factory
    public interface FactoryDao {

      public SomeWidget.Dao getSomeWidgetDao();

    }


    // rest of application
    ...

  }


  // The choice isn't hard. If you use one style, you can still use the other one on the fly.
  // another common choice during testing.
  public class ConfusedApplicationDao implements Application.FactoryDao, SomeWidget.Dao {

    public SomeWidget.Dao getSomeWidgetDao() {
      return this;
    }

  }
</pre>
<p/></div>
<h2>Comments</h2>
<div class='comments'>
<div class='comment'>
<div class='author'>Sandeep</div>
<div class='content'>
Thanks for the information<br /><br /><a href="http://extreme-java.blogspot.com" rel="nofollow">http://extreme-java.blogspot.com</a></div>
</div>
</div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Minimizing Hibernate Schema Complexity]]></title>
    <link href="http://dragonfax.github.com/blog/2011/03/14/minimizing-hibernate-schema-complexity/"/>
    <updated>2011-03-14T00:34:00-07:00</updated>
    <id>http://dragonfax.github.com/blog/2011/03/14/minimizing-hibernate-schema-complexity</id>
    <content type="html"><![CDATA[<div class='post'>
In my applications I persist a lot of structured data into the database.
Hibernate and other ORMs are great at making this easy to do.
One problem is that they tend to map the entire object structure to rigidly structured database fields and tables.
Quite often that&#8217;s just overkill.
<p/>

<h2>Strings as a black box datatype</h2>

  Take strings for instance.
  A <b>VARCHAR</b> makes perfect sense if you know the string will always be less than, say, 30 characters.
  Even if your not going to use that string field in a where clause, ever.
  <p/>

  But if you won&#8217;t know the max size the string will be for every instance,
  or it could be a very large string and you&#8217;re never going to use it in a search,
  then your fine using a <b>LOB</b> column to store that string.
<p/>

  Modern ORMs will even read/write the whole string value into/out from the <b>LOB</b> column for you.
  Or give you the <b>CLOB</b> instance itself for better performance, whichever you prefer.
<p/>

  I&#8217;ve experienced many DBAs that don&#8217;t like the use of <b>LOB</b> columns. But I&#8217;ve never understood that, as this is exactly the purpose that LOB columns were meant to solve. The storage of arbitrary data in the database, no different than in a file, without any sort of internal random access, indexing, or searching. A Blackbox-column to the database server, if you will.
<p/>


<h2>Complicated Object Graphs</h2>

  Worse is when you have classes with lots of field and subobjects.
  This can get messy, even if they&#8217;re just value objects.
<p/>

  The multiple tables, table hierarchies, link tables, and huge column lists that can result,
  while entirely valuable for some classes, are just overkill for others.
  Especially when you won&#8217;t be indexing, searching or retrieving individually, any of those fields/rows/objects.
<p/>

<h2>Persisting Serialized Classes</h2>
 
  ORMs can persist a whole instance into one field.
  They do so using serialization of some form or another to turn the instance into flat data like a byte array.
  Then this data can be persisted as a <b>BLOB</b> value.
<p/>

  In the case of Hibernate, its as simple as marking a reference (non primitive) field with <b>@Lob</b>, just as with the strings.
  But in this case, by default, Hibernate will use the standard java serialization mechanism.
  Which some would take exception *cough* to.
<p/>

  You can provide your own serialization mechanism of course.
  I&#8217;m not sure how to do this across the board for hibernate.
  But my solution is just to create a custom hibernate <b>UserType</b> implementation.
  Then I can mark the fields with this custom <b>UserType</b>, that I want stores as non-entities.
<p/>

  This is surprisingly easy.

<h2>XML</h2>
  For the serialization format, I chose XML.
  There are a number of good XML serializers for java objects.
  Some even work well on arbitrary classes, though you shouldn&#8217;t be putting just any classes in your databases columns.
<p/>

  I use XML because its easy to;
  <ul>
    <li>
    read, when debugging
    </li>
    <li>
    manipulate if need be
    </li>
    <li>
    migrate, on object structure changes
    </li>
  </ul>
<p/>

  I chose xstream as my serializer because;
  <ul>
    <li>
    * its easy to setup and use.
    </li>
    <li>
    * it maps most classes automatically
    </li>
    <li>
    * is extremely flexible
    </li>
  </ul>
<p/>

<h2>Persisting Exceptions</h2>

  Another reason we went with xstream, is that in some cases we serialize exceptions, for debugging and posterity.
  This can be an whole mess by itself.
  So I needed something that could serialize most arbitrary classes, without configuration.
  As you never know whats going to pop up in an instance field in an exception class/cause hierarchy.
<p/>

  But at the same time I didn&#8217;t want to use different serialization solutions, one for exceptions and another for my real data classes.
<p/>

  I&#8217;ll leave out the discussion about how to deal with bad/unserializable exception classes *cough oracle cough*.
  Truth be told, we&#8217;re phasing out persisting exceptions after all. Which is just common sense.
  <p/>


There are other good serialization libraries out there, though.
<p/>

<h2>Lob compression</h2>

  Another discussion I&#8217;m leaving out is the compression of the string XML <b>CLOB</b> data into a binary <b>LOB</b>.
  Which we do as an easy space saving measure.
  But once you&#8217;ve got the hibernate <b>UserType</b> setup, something like this is rather academic.
<p/>

<h2>Whole Entity Serialization</h2>
  I&#8217;ve considered serializing the whole entity to one field.
  Only pulling out specially annotated fields into individual table columns for indexing and searching.
<p/>

  But this doesn&#8217;t seem easy, let alone a good idea.
  That would leave you with redundant data, broken out into non-LOB columns and serialized in the LOB column at the same time.
  Which could lead to bugs.
  And the implementation of this would be complicated to begin with.
<p/>

<h2>Metadata Objects</h2>

  Its possible to cajole all your non-column fields into one Metadata object.
  So that they can be serialized into one LOB column in the table for your entity.
  But I find this is also overdoing it.
<p/>

  Databases can have multiple LOB columns per table. Having a few instead of just one isn&#8217;t going to have a major impact.
  I just design my classes naturally, and only resort to special Metadata objects like this in rare situation.
  Say, when I have a <b>TON</b> of fields in a class, and I won&#8217;t be using them in SQL.
<p/>

  That may mean a few other primitive fields get columns of their own, as well.

<p/>

<h2>Nitty Gritty</h2>

Lets get down to some code then.
Its pretty straight forward, if you check the javadocs for the hibernate <b>UserType</b>.
<p/>

Of course <b>Serializer</b> is my singleton class providing the chosen
serialization mechanism.
<p/>

<pre class="brush: java">
public class XMLUserType implements UserType {

  @Override
  public int[] sqlTypes() {
    return new int[]{ java.sql.Types.CLOB };
  }

  @Override
  public Class&lt;Serializable&gt; returnedClass() {
    return Serializable.class;
  }

  @Override
  public boolean isMutable() {
    return true;
  }

  @Override
  public Object deepCopy(Object value) {
    return Serializer.deserialize(Serializer.serialize((Serializable) value));
  }

  @Override
  public Serializable disassemble(Object value) {
    return (Serializable) value;
  }
  @Override
  public Object assemble(Serializable cached, Object owner) {
    return cached;
  }

  @Override
  public Object replace(Object original, Object target, Object owner){
    return deepCopy(original);
  }

  @Override
  public boolean equals(Object x, Object y) {
    if (x == null ) {
      return y == null;
    }
    else {
      return x.equals(y);
    }
  }

  @Override
  public int hashCode(Object x) {
    return x.hashCode();
  }

  @Override
  public Object nullSafeGet(ResultSet rs, String[] names, Object owner) throws HibernateException, SQLException {
      String columnName = names[0];

    try {

        Reader stream = rs.getCharacterStream(columnName);

        if ( stream == null )
          return null;

      // slurp reader to string.
      StringBuilder buffer = new StringBuilder();
      char[] c = new char[1024];
      int numRead = 0;
      while ( ( numRead = stream.read(c) ) != -1 ) {
        buffer.append(c, 0, numRead);
      }
      stream.close();

        return Serializer.deserialize(buffer.toString());

    } catch (IOException e) {
      throw new HibernateException("IOException while reading clob",e);
    }
    
  } 


  @Override
  public void nullSafeSet(PreparedStatement st, Object value, int index) throws HibernateException, SQLException {

    if( value == null ) {
      st.setNull( index, sqlTypes()[0] );
      return;
    }
   
    String xmlString = Serializer.serialize((Serializable) value);

    Reader reader = new StringReader(xmlString);
    st.setCharacterStream(index, reader, xmlString.length());
  }
 
}
</pre>


<p/>

<h2>notes</h2>

<ul>

<li>
You can followup the equals() and hashcode() implementations by comparing the serialized data as well.
This might make sense in some cases, if the serialized form is simpler than the runtime form of your objects.
This can happen with lots of transient fields.

</li>

<li>
Oracle can put <b>LOB</b>s inlined in the table row data. When the lob is less than 4k.
You&#8217;ll want to be certain whether its doing it in your table or not. In case that blows up row size.
</li>

</ul></div>
<h2>Comments</h2>
<div class='comments'>
<div class='comment'>
<div class='author'>Jason Stillwell</div>
<div class='content'>
Good idea. I also understand YAML is popular.<br /><br />Do Java&lt;-&gt; JSON serializers handle cyclic reference in the object graph well?</div>
</div>
<div class='comment'>
<div class='author'>Toi</div>
<div class='content'>
If I have to do that, I will, personally, choose JSON over XML.</div>
</div>
</div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Programmers are People Too]]></title>
    <link href="http://dragonfax.github.com/blog/2011/03/11/programmers-are-people-too/"/>
    <updated>2011-03-11T22:41:00-08:00</updated>
    <id>http://dragonfax.github.com/blog/2011/03/11/programmers-are-people-too</id>
    <content type="html"><![CDATA[<div class='post'>
I know that programmers.stackexchange is supposed to be the cruft of stackoverflow&#8230; the spam folder, if you will. But its turning out to be my favorite programming related site.</div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Lazy Loading data when Component Shows]]></title>
    <link href="http://dragonfax.github.com/blog/2011/03/06/lazy-loading-data-when-component-shows/"/>
    <updated>2011-03-06T17:46:00-08:00</updated>
    <id>http://dragonfax.github.com/blog/2011/03/06/lazy-loading-data-when-component-shows</id>
    <content type="html"><![CDATA[<div class='post'>
Sometimes you don&#8217;t want to load the data for a view, but not until the view is actually being seen by the user. Such as when they click on the tab to expose it.
<br/>
<br/>
This is taken care of automatically in Web UI&#8217;s because the user simply won&#8217;t be on the right page yet. Not until they&#8217;ve clicked on the right link or button to take them to the page with that view.
<br/>
<br/>
But I do this a lot in the front-end tier of multi-tier applications (i.e. the desktop UI for a remote backend or database ). Desktop applications tend to have all the views and their code constructed at startup. 
<br/>
<br/>
Waiting for the component to be visible can be a little tricky in Swing. Various events and states can be mis-leading. Other components can think they&#8217;re visible but actually be obscured. You also don&#8217;t want to poll for isShowing().
<br/>
<br/>
Here is a skeleton that works well for me.

<pre class="brush: java">
public class LogPage extends JPanel {

  public LogPage() {
    
    LogView logView = new LogView();
    add(logView);
  
    // here we will wait until we are shown to actually load data.
    addHierarchyListener(new HierarchyListener() {
      public void hierarchyChanged(HierarchyEvent e) {
        if ((HierarchyEvent.SHOWING_CHANGED & e.getChangeFlags()) !=0 && isShowing()) {
          logView.setData(loadDataForView());
        }
      }
    });
  }

  private data loadDataForView() {
    ...
  }
</pre>


No comments on evils of extending JPanel, please. That&#8217;s not the point of this post.</div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Spring Java-based Configuration and main()]]></title>
    <link href="http://dragonfax.github.com/blog/2011/02/24/spring-java-based-configuration-and/"/>
    <updated>2011-02-24T22:31:00-08:00</updated>
    <id>http://dragonfax.github.com/blog/2011/02/24/spring-java-based-configuration-and</id>
    <content type="html"><![CDATA[<div class='post'>
I used the java-based @Configuration, new in Spring 3, to embed my spring bean configuration right into my main() class.<br />
<br />
Of course I could also embed the bean configuration into the code by 
programmatically constructing the beanfactory/applicationcontext. But 
coding that is very ugly and wordy. Boilerplate ridden, if you will.<br />
<br />
<pre class="brush: java">@Configuration
@ImportResource({
  "some-property-defintitions.xml",
  "some-beans.xml"
})
public class MockRpcGui {

  /* add last minute beans to fill out dependendencies, or mock them (hurr hurr) */
  @Bean
  GuiService guiService() {
    return new DummyGuiService();
  }


  public static void main(String[] args) {

    AnnotationConfigApplicationContext javaConfigContext = new AnnotationConfigApplicationContext();
    javaConfigContext.register(MockRpcGui.class);
    javaConfigContext.refresh();

    GUI gui = BeanFactoryUtils.beanOfTypeIncludingAncestors(javaConfigContext, GUI.class);
    gui.start();
    javaConfigContext.close();
  }

}


</pre>
In my projects I tend to have a large volume of command line programs and other dev programs that start up only subsets of the entire project. Which means a lot of nested (imported) bean xml files.<br />
<br />
Scanning never worked out well for me. I&#8217;d have many implementations of the same interface and for each subset I&#8217;d only want to use one. Plus loading all those other beans, even if it didn&#8217;t cause any issues, would be slow and bulky. I made due by combining xml files with annotations. So the xml files only had to have dummy <br />
&lt;bean class=&#8221;blah&#8221;/&gt; definitions, and the rest of the details were embedded in the javacode of each bean.<br />
<br />
There is somethign asthemtic about having the bean configs represent subsets or whole applications, and having a main() class that just contains the one final trigger to start off the whole mess.<br />
<br />
<br /></div>
]]></content>
  </entry>
  
</feed>
